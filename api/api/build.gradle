import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id "org.jetbrains.kotlin.plugin.spring"
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-allopen'

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

dependencies {

    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    implementation 'com.h2database:h2'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    implementation "nl.tno.federated.corda:contracts:0.3.11-SNAPSHOT"
    implementation "nl.tno.federated.corda:workflows:0.3.11-SNAPSHOT"

    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.testcontainers:junit-jupiter'

    implementation 'org.eclipse.rdf4j:rdf4j-runtime:4.3.4'
    implementation 'org.eclipse.rdf4j:rdf4j-sparqlbuilder:4.3.4'
    implementation 'com.io-informatics.oss:jackson-jsonld:0.1.1'
    implementation 'com.github.jsonld-java:jsonld-java:0.13.4'
    implementation 'com.apicatalog:titanium-json-ld-jre8:1.3.2' // JSON LD parser
    implementation("be.ugent.rml:rmlmapper:6.2.2")

    // Corda dependency we need for the rpc connection.
    implementation "net.corda:corda-rpc:4.9.2"

    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

    implementation 'com.github.jsonld-java:jsonld-java:0.13.4'
    implementation 'org.glassfish:jakarta.json:2.0.1'
    implementation 'com.github.slugify:slugify:3.0.6'

    implementation 'org.eclipse.rdf4j:rdf4j-model:4.3.4'
    implementation 'org.eclipse.rdf4j:rdf4j-rio-rdfjson:4.3.4'
    implementation 'org.eclipse.rdf4j:rdf4j-rio-jsonld:4.3.4'
    implementation 'org.eclipse.rdf4j:rdf4j-rio-turtle:4.3.4'

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.jetbrains.kotlin:kotlin-test"
    testImplementation "org.mockito.kotlin:mockito-kotlin:5.0.0"
    testImplementation "io.mockk:mockk:1.13.5"
    testImplementation 'org.junit.jupiter:junit-jupiter-api'

    testCompileOnly 'junit:junit'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine'

    // JSON Validation
    implementation 'net.pwall.json:json-kotlin-schema:0.47'


}

tasks.named('compileJava') {
    inputs.files(tasks.named('processResources'))
}


configurations.implementation {
    exclude group: 'nl.tno.federated.corda' , module: 'services'
    exclude group: 'net.corda', module: 'corda'
    exclude group: 'org.hibernate', module: 'hibernate-core'
    exclude group: 'org.liquibase', module: 'liquibase-core'
}

springBoot {
    mainClass = "nl.tno.federated.api.ServerKt"
}

tasks.named('test') {
    useJUnitPlatform()
}